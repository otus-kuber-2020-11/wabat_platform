apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  namespace: default
data:
  nginx.conf: |
    worker_processes auto;
    events {
      worker_connections 1024;
    }
    http {
      # Hide nginx version information.
      server_tokens off;
      gzip on;
      # Compression level (1-9).
      # 5 is a perfect compromise between size and CPU usage, offering about
      # 75% reduction for most ASCII files (almost identical to level 9).
      gzip_comp_level    5;
      # Don't compress anything that's already small and unlikely to shrink much
      # if at all (the default is 20 bytes, which is bad as that usually leads to
      # larger files after gzipping).
      # Default: 20
      gzip_min_length    256;
      # Tell proxies to cache both the gzipped and regular version of a resource
      # whenever the client's Accept-Encoding capabilities header varies;
      # Avoids the issue where a non-gzip capable client (which is extremely rare
      # today) would display gibberish if their proxy gave them the gzipped version.
      # Default: off
      gzip_vary          on;
      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /usr/share/nginx/html/;
        location / {
          access_log off;
          try_files $uri $uri/ =404;
        }
      }
      server {
        server_name metrics;
        listen 8080;
        listen [::]:8080;
        location /probes/health {
          access_log off;
          return 200 "healthy";
        }
        location /nginx_status {
            access_log off;
            stub_status;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-status-deployment
  labels:
    app: nginx-status-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-status-deployment
  template:
    metadata:
      labels:
        app: nginx-status-deployment
    spec:
      volumes:
      - name: config
        configMap:
          name: nginx
      containers:
      - name: nginx
        image: nginx:1.19.9-alpine
        ports:
        - containerPort: 80
        volumeMounts:           
        - name: config
          mountPath: /etc/nginx
        readinessProbe:
          httpGet:
            path: /probes/health
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /probes/health
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 15
          failureThreshold: 3
          successThreshold: 1
      - name: metrics
        image: nginx/nginx-prometheus-exporter:0.9.0
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 9113
        args: [
          "-nginx.scrape-uri", "http://localhost:8080/nginx_status"
          ]
---
kind: Service
apiVersion: v1
metadata:
  name: nginx-status-deployment
  labels:
    app: nginx-status-deployment
spec:
  selector:
    app: nginx-status-deployment
  ports:
  - name: nginx-status-deployment
    port: 9113
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-status-deployment
  labels:
    team: frontend
spec:
  selector:
    matchLabels:
      app: nginx-status-deployment
  endpoints:
  - port: nginx-status-deployment
